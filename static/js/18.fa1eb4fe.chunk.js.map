{"version":3,"sources":["components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","hooks/useHarvest.ts","components/UnlockButton.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","components/Tags.tsx","hooks/useStake.ts","config/index.ts","components/layout/Flex.tsx","hooks/useUnstake.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/utils/contracts.ts","views/Farms/contexts/NftProvider.tsx","views/Farms/contexts/EpicProvider.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","useHarvest","farmPid","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","onReward","useCallback","a","harvest","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","pid","Promise","all","useSousHarvest","sousId","isUsingBnb","sousChefContract","useSousChef","handleHarvest","soushHarvestBnb","soushHarvest","updateUserPendingReward","updateUserBalance","UnlockButton","TranslateString","useI18n","connect","reset","onPresentConnectModal","useWalletModal","onClick","StyledInputWrapper","input","radii","default","StyledInput","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","primary","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","toLocaleString","BigNumber","times","toString","NoFeeTag","variant","outline","startIcon","CoreTag","CommunityTag","BinanceTag","useSousStake","handleStake","amount","stake","sousStakeBnb","sousStake","updateUserStakedBalance","onStake","useStake","console","info","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","SYRUPIDS","useSousUnstake","isOldSyrup","includes","onUnstake","unstake","sousEmegencyUnstake","sousUnstake","useUnstake","Wrapper","ExpandableSectionButton","expanded","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","mustHaveNft","liquidityUrlPathParts","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","_maxInput","String","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestAction","earnings","rawEarningsBalance","marginBottom","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","lpContract","getContract","onApprove","useApprove","handleApprove","error","textTransform","fontSize","pr","mt","fullWidth","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","getNftContract","contractOptions","nftAbi","nft","NFT","getFromWei","v","parseFloat","fromWei","getFromWayArray","array","t","push","getToFloat","parseInt","getToInt","NftProviderContext","createContext","NftProvider","isMounted","useRef","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","currentBlock","useBlock","useEffect","multicall","nftFarm","address","NftFarm","name","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","fetchContractData","nftContract","params","getMinted","methods","call","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","nftId","tokenIdPromises","tokenIdsOwnedByWallet","association","current","canBurnNft","Provider","getTokenIds","reInitialize","EpicProviderContext","EpicProvider","epicHasClaimed","myEpicMints","epicNftFarm","EpicNftFarm","RainbowLight","keyframes","EliteStyledCardAccent","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","lifePrice","bnbPrice","vladPrice","haveNft","indexOf","undefined","log","showExpandableSection","setShowExpandableSection","split","toLocaleLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","BOBA","CAKE","LIFE","Number","maximumFractionDigits","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","mapIndexWithUrl","FarmTabButtons","stakedOnly","setStakedOnly","path","useLocation","pathname","defaultIndex","getDefaultPathIndex","useRouteMatch","url","isExact","activeInactiveIndex","locationPath","localStorage","getItem","setItem","getActiveInactiveIndex","ToggleWrapper","checked","activeIndex","as","Link","to","textSubtle","Hero","mediaQueries","lg","Farms","Card","farmsProps","farmsLP","useFarms","usePriceBobaBusd","usePriceLifeBusd","usePriceCakeBusd","usePriceBnbBusd","useHistory","tokenMode","fastRefresh","useRefresh","activeFarms","filter","inactiveFarms","NFTFarms","baseNFTFarms","rareNFTFarms","eliteNFTFarms","getStackedOnlyFarms","allFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","tokenPerBlock","poolWeight","pow","comparedTo","Page","exact"],"mappings":"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","file":"static/js/18.fa1eb4fe.chunk.js","sourcesContent":["import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: #B28E59 !important;\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {depositFeeBP > 0 ? (\n        <StyledMaxText>\n          {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP / 10000).toString()}{' '}\n          {symbol}\n        </StyledMaxText>\n      ) : null}\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 4px;\n  }\n`\n\nexport default FlexLayout\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport interface ExpandableSectionProps {\r\n  isTokenOnly?: boolean\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n  mustHaveNft: number\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  isTokenOnly,\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  mustHaveNft,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"flex-start\">\r\n        {mustHaveNft === 1 && (\r\n          <Link color=\"white\" href=\"nft\" bold={false}>\r\n            Mint Base NFT\r\n          </Link>\r\n        )}\r\n        {mustHaveNft === 2 && (\r\n          <Link color=\"white\" href=\"nft\" bold={false}>\r\n            Mint Rare NFT\r\n          </Link>\r\n        )}\r\n        {mustHaveNft === 3 && (\r\n          <Link color=\"white\" href=\"epic\" bold={false}>\r\n            Mint Epic NFT\r\n          </Link>\r\n        )}\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal \r\n          external={false}\r\n          href={\r\n            isTokenOnly\r\n              ? `https://exchange.pancakeswap.finance/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n              : `https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`\r\n          }\r\n        >\r\n          {lpLabel}\r\n        </StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link color=\"#999\" external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', depositFeeBP = 0 }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    const _maxInput = String(fullBalance)\n    setVal(_maxInput)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP }) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {pid === 12 ? (\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size=\"sm\"\n            variant=\"secondary\"\n            marginBottom=\"15px\"\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n        ) : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if (isTokenOnly) {\n      return getContract(ethereum as provider, tokenAddress)\n    }\n    return getContract(ethereum as provider, lpAddress)\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        depositFeeBP={depositFeeBP}\n      />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          LIV\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'LIV per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import { AbiItem, fromWei } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/nfts'\nimport BigNumber from 'bignumber.js'\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = (nft as unknown) as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport const getFromWei = (v: any) => {\n  if (!v) return 0\n  return parseFloat(fromWei(v.toString(), 'ether'))\n}\n\nexport const getFromWayArray = (v: any) => {\n  if (!v) return []\n  const array = []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(fromWei(v[i].toString(), 'ether'))\n    }\n  }\n  return array\n}\n\nexport const getToFloat = (v: any) => {\n  if (!v) return []\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseInt(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport const getToInt = (v: any) => {\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseFloat(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport { NftFarm } from 'config/constants/nfts'\nimport multicall from 'utils/multicall'\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  myMints: number[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: BunnyMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: '',\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n    myMints: [],\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n\n          allowMultipleClaimsArr,\n          rarityArr,\n          priceMultiplierArr,\n          maxMintPerNftArr,\n          tokenPerBurnArr,\n        ] = await multicall(nftFarm, [\n          { address: NftFarm, name: 'startBlockNumber' },\n          { address: NftFarm, name: 'endBlockNumber' },\n          { address: NftFarm, name: 'countBurnt' },\n          { address: NftFarm, name: 'totalSupplyDistributed' },\n          { address: NftFarm, name: 'currentDistributedSupply' },\n          { address: NftFarm, name: 'allowMultipleClaims' },\n          { address: NftFarm, name: 'rarity' },\n          { address: NftFarm, name: 'priceMultiplier' },\n          { address: NftFarm, name: 'maxMintPerNft' },\n          { address: NftFarm, name: 'tokenPerBurn' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBurnt]: [BigNumber] = countBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBurnt: countBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          allowMultipleClaims: allowMultipleClaimsArr[0],\n          rarity: rarityArr[0].toString(),\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(nftFarm, [{ address: NftFarm, name: 'getMinted', params: [account] }])\n\n        // console.log('getMinted', getMinted)\n\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getToInt(getMinted[0][3])\n        const prices = getFromWayArray(getMinted[0][4])\n        const myMints = getToInt(getMinted[0][5])\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n          myMints,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport epicNftFarm from 'config/abi/epicNftFarm.json'\nimport { EpicNftFarm } from 'config/constants/epic'\nimport multicall from 'utils/multicall'\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  epicHasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  myEpicMints: number[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: BunnyMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const EpicProviderContext = createContext<Context | null>(null)\n\nconst EpicProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    epicHasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: '',\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n    myEpicMints: [],\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n\n          allowMultipleClaimsArr,\n          rarityArr,\n          priceMultiplierArr,\n          maxMintPerNftArr,\n          tokenPerBurnArr,\n        ] = await multicall(epicNftFarm, [\n          { address: EpicNftFarm, name: 'startBlockNumber' },\n          { address: EpicNftFarm, name: 'endBlockNumber' },\n          { address: EpicNftFarm, name: 'countBurnt' },\n          { address: EpicNftFarm, name: 'totalSupplyDistributed' },\n          { address: EpicNftFarm, name: 'currentDistributedSupply' },\n          { address: EpicNftFarm, name: 'allowMultipleClaims' },\n          { address: EpicNftFarm, name: 'rarity' },\n          { address: EpicNftFarm, name: 'priceMultiplier' },\n          { address: EpicNftFarm, name: 'maxMintPerNft' },\n          { address: EpicNftFarm, name: 'tokenPerBurn' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBurnt]: [BigNumber] = countBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBurnt: countBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          allowMultipleClaims: allowMultipleClaimsArr[0],\n          rarity: rarityArr[0].toString(),\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(epicNftFarm, [{ address: EpicNftFarm, name: 'getMinted', params: [account] }])\n\n        // console.log('getMinted', getMinted)\n\n        const epicHasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getToInt(getMinted[0][3])\n        const prices = getFromWayArray(getMinted[0][4])\n        const myEpicMints = getToInt(getMinted[0][5])\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          epicHasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n          myEpicMints,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <EpicProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </EpicProviderContext.Provider>\n  )\n}\n\nexport default EpicProvider\n","import React, { useMemo, useState, useContext } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\nimport { NftProviderContext } from '../../contexts/NftProvider'\r\nimport { EpicProviderContext } from '../../contexts/EpicProvider'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst EliteStyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 15px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  margin-bottom: 20px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  lifePrice?: BigNumber\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  vladPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({\r\n  farm,\r\n  removed,\r\n  lifePrice,\r\n  cakePrice,\r\n  bnbPrice,\r\n  vladPrice,\r\n  ethereum,\r\n  account,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const { myMints, hasClaimed } = useContext(NftProviderContext)\r\n  const { myEpicMints, epicHasClaimed } = useContext(EpicProviderContext)\r\n  let mustHaveNft = 0\r\n\r\n  if (hasClaimed && farm.mustHaveNft === 1) {\r\n    for (let index = 0; index < 3; index++) {\r\n      const haveNft = myMints[hasClaimed.indexOf(index)]\r\n      if (haveNft !== undefined && haveNft !== 0) {\r\n        mustHaveNft = haveNft\r\n      }\r\n    }\r\n  } else if (hasClaimed && farm.mustHaveNft === 2) {\r\n    for (let index = 3; index < 6; index++) {\r\n      const haveNft = myMints[hasClaimed.indexOf(index)]\r\n      if (haveNft !== undefined && haveNft !== 0) {\r\n        mustHaveNft = haveNft\r\n      }\r\n    }\r\n  } else if (epicHasClaimed && farm.mustHaveNft === 3) {\r\n    for (let index = 0; index < 3; index++) {\r\n      const haveNft = myEpicMints[epicHasClaimed.indexOf(index)]\r\n      if (haveNft !== undefined && haveNft !== 0) {\r\n        console.log(farm.lpSymbol, haveNft)\r\n        mustHaveNft = haveNft\r\n      }\r\n    }\r\n  } else if (farm.mustHaveNft === 0) {\r\n    mustHaveNft = 1\r\n  }\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BOBA) {\r\n      return vladPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.LIFE) {\r\n      // console.log(lifePrice.toString(), farm.lpTotalInQuoteToken.toString());\r\n      return lifePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [lifePrice, vladPrice, bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 2 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol\r\n  const earnLabel = 'LIV'\r\n  const farmAPY =\r\n    farm.apy &&\r\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2,\r\n    })\r\n\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\r\n\r\n  return (\r\n    <FCard>\r\n     {farm.mustHaveNft === 2 && <StyledCardAccent />}\r\n      {farm.mustHaveNft === 3 && <EliteStyledCardAccent />}\r\n       {farm.multiplier === \"100X\" && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        risk={risk}\r\n        depositFee={farm.depositFeeBP}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>Rarity</Text>\r\n        <Text bold>\r\n          {farm.mustHaveNft === 1 && 'Base'}\r\n          {farm.mustHaveNft === 2 && 'Rare'}\r\n          {farm.mustHaveNft === 3 && 'Elite'}\r\n        </Text>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{TranslateString(352, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  quoteTokenAdresses={quoteTokenAdresses}\r\n                  quoteTokenSymbol={quoteTokenSymbol}\r\n                  tokenAddresses={tokenAddresses}\r\n                  cakePrice={cakePrice}\r\n                  apy={farm.apy}\r\n                />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        <Text>{farm.depositFeeBP ? farm.depositFeeBP / 100 : '0'}%</Text>\r\n      </Flex>\r\n\r\n      {mustHaveNft > 0 && <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />}\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          isTokenOnly={farm.isTokenOnly}\r\n          bscScanAddress={\r\n            farm.isTokenOnly\r\n              ? `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n              : `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={quoteTokenAdresses}\r\n          quoteTokenSymbol={quoteTokenSymbol}\r\n          tokenAddresses={tokenAddresses}\r\n          mustHaveNft={farm.mustHaveNft}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link, useLocation } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst mapIndexWithUrl: { [k: string]: number } = {\n  '/farms': 0,\n  '/farms/base': 1,\n  '/farms/rare': 2,\n  '/farms/elite': 3,\n}\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const getDefaultPathIndex = (path: string): number => {\n    const defaultIndex = mapIndexWithUrl[path]\n    return defaultIndex\n  }\n\n  const location = useLocation()\n  const path = location.pathname\n\n  const defaultIndex = getDefaultPathIndex(path)\n\n  const [activeTabIndex, setActiveTabIndex] = useState(defaultIndex)\n\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  const handleClick = (index: number) => {\n    setActiveTabIndex(index)\n  }\n\n  const getActiveInactiveIndex = (locationPath): number => {\n    let index = parseInt(localStorage.getItem('activeInactiveIndex'))\n    if (locationPath === '/farms/history') {\n      index = 1\n    } else if (locationPath === '/farms') {\n      index = 0\n    }\n    localStorage.setItem('activeInactiveIndex', index.toString())\n    return index\n  }\n\n  const activeInactiveIndex = getActiveInactiveIndex(path)\n\n  return (\n    <>\n      <Wrapper>\n        <ToggleWrapper>\n          <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n          <Text> {TranslateString(699, 'Staked only')}</Text>\n        </ToggleWrapper>\n        <ButtonMenu activeIndex={activeInactiveIndex} size=\"sm\" variant=\"subtle\">\n          <ButtonMenuItem as={Link} to={`${url}`}>\n            {TranslateString(698, 'Active')}\n          </ButtonMenuItem>\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\n            {TranslateString(700, 'Inactive')}\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </Wrapper>\n    {/*  <Wrapper>\n        <ButtonMenu activeIndex={activeTabIndex} onClick={handleClick} size=\"sm\" variant=\"subtle\">\n          <ButtonMenuItem as={Link} to={`${url}/all`}>\n            {TranslateString(10006, 'All')}\n          </ButtonMenuItem>\n          <ButtonMenuItem as={Link} to={`${url}/base`}>\n            {TranslateString(10007, 'Base')}\n          </ButtonMenuItem>\n          <ButtonMenuItem as={Link} to={`${url}/rare`}>\n            {TranslateString(10008, 'Rare')}\n          </ButtonMenuItem>\n          <ButtonMenuItem as={Link} to={`${url}/elite`}>\n            {TranslateString(10009, 'Elite')}\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </Wrapper> */}\n    </>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  @media (max-width: 767px) {\n    margin-right: 0px;\n  }\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback, useState, useContext } from 'react'\nimport styled from 'styled-components'\nimport { Route, useRouteMatch, useHistory } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Card, CardBody, Image, Heading, Link, Text, Button } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceLifeBusd, usePriceBnbBusd, usePriceCakeBusd, usePriceBobaBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport InfoRow from 'views/Nft/components/InfoRow'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\nimport NftProvider from './contexts/NftProvider'\nimport EpicProvider from './contexts/EpicProvider'\n\nexport interface FarmsProps {\n  tokenMode?: boolean\n}\n\n\nconst Hero = styled.div`\n  align-items: center;\n\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-top: 0px;\n  margin-bottom: 32px;\n  padding-top: 10px;\n  text-align: center;\n\n  \n\n  ${({ theme }) => theme.mediaQueries.lg} {\n\n    background-position:  center;\n   \n    padding-top: 5px;\n  }\n`\n\nconst CustomCard = styled(Card)`\n  margin-bottom: 20px;\n  color: red;\n  cursor: pointer;\n  -webkit-transition: all 0.2s ease-in-out;\n  transition: all 0.2s ease-in-out;\n  background-size: 100% 100%;\n  background-position: center;\n`\n\nconst CustomText = styled(Text)`\n  font-size: 18px;\n  font-weight: bolder;\n  \n`\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const vladPrice = usePriceBobaBusd()\n  const lifePrice = usePriceLifeBusd()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const history = useHistory()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { tokenMode } = farmsProps\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  // const activeFarms = farmsLP.filter(\n  //   (farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && farm.lpSymbol !== 'BNB-BUSD LP',\n  // )\n  // const inactiveFarms = farmsLP.filter(\n  //   (farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && farm.lpSymbol !== 'BNB-BUSD LP',\n  // )\n\n  const activeFarms = farmsLP.filter((farm) => farm.multiplier !== '0X' && farm.lpSymbol !== 'BNB-BUSD LP')\n  const inactiveFarms = farmsLP.filter((farm) => farm.multiplier === '0X' && farm.lpSymbol !== 'BNB-BUSD LP')\n\n  const NFTFarms = localStorage.getItem('activeInactiveIndex') === '0' ? activeFarms : inactiveFarms\n\n  const baseNFTFarms = NFTFarms.filter((farm) => farm.mustHaveNft === 1)\n  const rareNFTFarms = NFTFarms.filter((farm) => farm.mustHaveNft === 2)\n  const eliteNFTFarms = NFTFarms.filter((farm) => farm.mustHaveNft === 3)\n\n  const getStackedOnlyFarms = (allFarms) => {\n    const stakedOnlyFarms = allFarms.filter(\n      (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n    )\n    return stakedOnlyFarms\n  }\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.tokenPerBlock || 1)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice)\n        }\n\n        if (totalValue.comparedTo(0) > 0) {\n          apy = apy.div(totalValue)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          vladPrice={vladPrice}\n          lifePrice={lifePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, vladPrice, lifePrice, ethereum],\n  )\n\n  return (\n    <EpicProvider>\n      <NftProvider>\n        <Page>\n          \n          <Hero>\n            <Text color=\"text\" fontSize=\"50px\" >FARMING </Text>\n              <Text color=\"text\" fontSize=\"30px\" >NEW BOOBAM FARMING HAS STARTED\n            </Text>\n          </Hero>\n          <div> \n         \n\n          <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} />\n          </div> \n          <div>\n            <Divider />\n            <FlexLayout>\n              <Route exact path={`${path}`}>\n                {stakedOnly ? farmsList(getStackedOnlyFarms(activeFarms), false) : farmsList(activeFarms, false)}\n              </Route>\n              <Route exact path={`${path}/history`}>\n                {farmsList(inactiveFarms, true)}\n              </Route>\n              <Route exact path={`${path}/all`}>\n                {stakedOnly ? farmsList(getStackedOnlyFarms(NFTFarms), false) : farmsList(NFTFarms, false)}\n              </Route>\n              <Route exact path={`${path}/base`}>\n                {stakedOnly ? farmsList(getStackedOnlyFarms(baseNFTFarms), false) : farmsList(baseNFTFarms, false)}\n              </Route>\n              <Route exact path={`${path}/rare`}>\n                {stakedOnly ? farmsList(getStackedOnlyFarms(rareNFTFarms), false) : farmsList(rareNFTFarms, false)}\n              </Route>\n              <Route exact path={`${path}/elite`}>\n                {stakedOnly ? farmsList(getStackedOnlyFarms(eliteNFTFarms), false) : farmsList(eliteNFTFarms, false)}\n              </Route>\n            </FlexLayout>\n          </div>\n        </Page>\n      </NftProvider>\n    </EpicProvider>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}