{"version":3,"sources":["views/LegendaryDetail/components/InfoRow.tsx","views/LegendaryDetail/components/Image.tsx","views/LegendaryDetail/utils/contracts.ts","views/LegendaryDetail/contexts/NftProvider.tsx","views/LegendaryDetail/components/ClaimNftModal.tsx","views/LegendaryDetail/components/BurnNftModal.tsx","views/LegendaryDetail/components/TransferNftModal.tsx","views/LegendaryDetail/components/NftCard/index.tsx","views/LegendaryDetail/index.tsx"],"names":["InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","previewImage","href","target","rel","getNftContract","contractOptions","nftAbi","nft","getContract","NFT","getFromWayArray","v","array","t","length","i","push","fromWei","toString","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","useState","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","account","useWallet","currentBlock","useBlock","useEffect","a","multicall","epicNftFarm","address","LegendaryNftFarm","name","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","toNumber","console","error","fetchContractData","nftContract","params","getMinted","log","methods","call","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","nftId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","fetchNonLoggedInContractData","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","pendingTx","setPendingTx","setError","TranslateString","useI18n","nftMintingContract","useRabbitMintingFarm","contraToken","useERC20","getLifeAddress","allowance","useNftAllowance","onApprove","useNftApprove","cakeBalance","useTokenBalance","cakeInWallet","getBalanceNumber","handleConfirm","mintNFT","send","from","on","title","tokenAmount","color","mb","fullWidth","disabled","onClick","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","AMOUNT_TO_CLAIM","style","alignItems","display","checked","scale","onChange","ml","cursor","variant","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","Web3","utils","isAddress","transferFrom","htmlFor","id","type","placeholder","evt","inputValue","isWarning","Header","InfoBlock","Button","attrs","SmallCard","Card","CustomButton","NftCard","isOpen","nftCount","nftBurnCount","useContext","originalImage","fileType","description","tokenSupply","metadata","nftIndex","indexOf","MINTED","MAX_MINT","firstCharOfAccount","slice","lastCharOfAccount","loggedIn","MINTS","walletCanClaim","undefined","price","Math","round","isSupplyAvailable","walletOwnsNft","fetchDetails","ChevronUpIcon","ChevronDownIcon","useCallback","isDataFetched","handleSuccess","useModal","onPresentClaimModal","onPresentTransferModal","isActive","height","width","loop","autoPlay","muted","kind","outline","mt","window","open","p","as","textAlign","StyledHero","textSubtle","StyledNotFound","CustomHeading","Heading","Detail","props","match","nft1","nfts","filter","Page","size"],"mappings":"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","file":"static/js/30.24d0e682.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import { AbiItem, fromWei } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/nfts'\nimport BigNumber from 'bignumber.js'\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = (nft as unknown) as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport const getFromWei = (v: any) => {\n  if (!v) return 0\n  return parseFloat(fromWei(v.toString(), 'ether'))\n}\n\nexport const getFromWayArray = (v: any) => {\n  if (!v) return []\n  const array = []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(fromWei(v[i].toString(), 'ether'))\n    }\n  }\n  return array\n}\n\nexport const getToFloat = (v: any) => {\n  if (!v) return []\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseInt(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport const getToInt = (v: any) => {\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseFloat(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport epicNftFarm from 'config/abi/epicNftFarm.json'\nimport { LegendaryNftFarm } from 'config/constants/legendary'\nimport multicall from 'utils/multicall'\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  myMints: number[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: BunnyMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: '',\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n    myMints: [],\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n\n          allowMultipleClaimsArr,\n          rarityArr,\n          priceMultiplierArr,\n          maxMintPerNftArr,\n          tokenPerBurnArr,\n        ] = await multicall(epicNftFarm, [\n          { address: LegendaryNftFarm, name: 'startBlockNumber' },\n          { address: LegendaryNftFarm, name: 'endBlockNumber' },\n          { address: LegendaryNftFarm, name: 'countBurnt' },\n          { address: LegendaryNftFarm, name: 'totalSupplyDistributed' },\n          { address: LegendaryNftFarm, name: 'currentDistributedSupply' },\n          { address: LegendaryNftFarm, name: 'allowMultipleClaims' },\n          { address: LegendaryNftFarm, name: 'rarity' },\n          { address: LegendaryNftFarm, name: 'priceMultiplier' },\n          { address: LegendaryNftFarm, name: 'maxMintPerNft' },\n          { address: LegendaryNftFarm, name: 'tokenPerBurn' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBurnt]: [BigNumber] = countBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBurnt: countBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          allowMultipleClaims: allowMultipleClaimsArr[0],\n          rarity: rarityArr[0].toString(),\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(epicNftFarm, [\n          { address: LegendaryNftFarm, name: 'getMinted', params: [account] },\n        ])\n\n        // console.log('getMinted', getMinted)\n\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getToInt(getMinted[0][3])\n        const prices = getFromWayArray(getMinted[0][4])\n        const myMints = getToInt(getMinted[0][5])\n\n        // console.log('hasClaimed', hasClaimed)\n        // console.log('amounts', amounts)\n        // console.log('ownerById', ownerById)\n        // console.log('maxMintByNft', maxMintByNft)\n        // console.log('prices', prices)\n        console.log('myMints', myMints)\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n          myMints,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    const fetchNonLoggedInContractData = async () => {\n      try {\n        const getMinted = await multicall(epicNftFarm, [\n          { address: LegendaryNftFarm, name: 'getMinted', params: ['0x0000000000000000000000000000000000000000'] },\n        ])\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          amounts,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    } else {\n      fetchNonLoggedInContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { LegendaryNftFarm, AMOUNT_TO_CLAIM } from 'config/constants/legendary'\nimport { getLifeAddress } from 'utils/addressHelpers'\nimport { Nft } from 'config/constants/types'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useERC20, useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\nimport { useNftAllowance } from '../../../hooks/useAllowance'\nimport { useNftApprove } from '../../../hooks/useApprove'\n\ninterface ClaimNftModalProps {\n  nft: Nft\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(LegendaryNftFarm)\n  const contraToken = useERC20(getLifeAddress())\n  const allowance = useNftAllowance(contraToken, LegendaryNftFarm, pendingTx)\n  const onApprove = useNftApprove(contraToken, LegendaryNftFarm)\n  const cakeBalance = useTokenBalance(getLifeAddress())\n  const cakeInWallet = getBalanceNumber(cakeBalance)\n\n  // console.log('getLifeAddress', getLifeAddress(), LegendaryNftFarm, allowance)\n  // console.log('allowance', allowance)\n\n  const handleConfirm = async () => {\n    if (allowance === null) {\n      return\n    }\n\n    try {\n      await nftMintingContract.methods\n        .mintNFT(nft.nftId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to claim NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to mint NFT:', err)\n    }\n  }\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError(`You must have LIFE balance to claim NFT`)\n    }\n  }, [cakeInWallet, setError])\n\n  return (\n    <Modal title={`Claim NFT for ${nft.tokenAmount} LIFE`} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n      </ModalContent>\n      <Actions>\n        <Button\n          fullWidth\n          disabled={!account || pendingTx || isLoading || allowance > 0}\n          onClick={async () => {\n            try {\n              setPendingTx(true)\n              await onApprove()\n              setPendingTx(false)\n            } catch (e) {\n              setPendingTx(false)\n              console.error(e)\n            }\n          }}\n        >\n          Approve\n        </Button>\n\n        <Button\n          fullWidth\n          onClick={handleConfirm}\n          disabled={!account || isLoading || cakeInWallet <= 0 || allowance <= 0}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { LegendaryNftFarm, AMOUNT_TO_CLAIM } from 'config/constants/legendary'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface BurnNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [accepted, setAccepted] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(LegendaryNftFarm)\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds\n\n      await nftMintingContract.methods\n        .burnNFT(tokenId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to burn NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to burn NFT:', err)\n    }\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>${AMOUNT_TO_CLAIM} LIFE</Value>\n        </InfoRow>\n      </ModalContent>\n      <ModalContent>\n        <Text color=\"failure\">\n          {TranslateString(999, 'When you trade in this NFT to receive LIFE, you will lose access to it forever!')}\n        </Text>\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\n      </ModalContent>\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\n          {TranslateString(999, 'I understand')}\n        </Text>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default BurnNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { NFT } from 'config/constants/legendary'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftContract = usePancakeRabbits(NFT)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await nftContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n  LogoIcon,\n} from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { AMOUNT_TO_CLAIM } from 'config/constants/legendary'\nimport Page from 'components/layout/Page'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { getNftContract } from '../../utils/contracts'\nimport ClaimNftModal from '../ClaimNftModal'\nimport BurnNftModal from '../BurnNftModal'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst StyledNotFound = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 64px);\n  justify-content: center;\n`\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst SmallCard = styled(Card)`\n  width: 500px;\n  margin: 0 auto;\n\n  @media (max-width: 767px) {\n    width: 320px;\n  }\n`\n\nconst CustomButton = styled(Button)`\n  margin-left: 10px;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: true,\n    nftCount: 0,\n    nftBurnCount: 0,\n  })\n  const TranslateString = useI18n()\n  const {\n    isInitialized,\n    hasClaimed,\n    ownerById,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize,\n    allowMultipleClaims,\n    rarity,\n    priceMultiplier,\n    maxMintPerNft,\n    tokenPerBurn,\n    amounts,\n    maxMintByNft,\n    prices,\n    myMints,\n  } = useContext(NftProviderContext)\n  const { account } = useWallet()\n\n  console.log('CONTRACT/GALLERY INFO:', totalSupplyDistributed, rarity, priceMultiplier, maxMintPerNft, tokenPerBurn)\n  console.log('LIMITS BY NFT:', tokenPerBurn, amounts, maxMintByNft, prices)\n\n  // maxMintPerNft limit max amount that a nft can be minted\n  // maxMintByNft array containing individual amount of mint per nft index\n  // prices array containing individual prices of a mint per nft index\n  // tokenPerBurn global price\n\n  console.log(ownerById)\n\n  const { nftId, name, previewImage, originalImage, fileType, description, metadata, tokenAmount, tokenSupply } = nft\n  const PRICE = prices[nft.nftId] || tokenPerBurn // here we get the price\n\n  const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\n\n  const MINTED = amounts[nftIndex] ? parseInt(amounts[nftIndex].toString()) : 0\n  const MAX_MINT = maxMintByNft[nftIndex] ? parseInt(maxMintByNft[nftIndex].toString()) : 6\n\n  const hasClaimedArr: any = hasClaimed[0]\n  const ownerByIdArr: any = ownerById[0]\n\n  const firstCharOfAccount = account != null && account.slice(0, 4)\n  const lastCharOfAccount = account != null && account.slice(-4)\n\n  const accountName = account != null && `${firstCharOfAccount}...${lastCharOfAccount}`\n\n  const loggedIn = account !== null\n\n  // console.log('?hasClaimed', hasClaimed)\n  // console.log('?ownerById', ownerById)\n\n  const MINTS = myMints[nftIndex] || 0\n\n  const walletCanClaim = maxMintPerNft === 0 || MINTED === undefined || MINTED < MAX_MINT\n\n  let price = 1200\n\n  if (amounts && amounts[nftIndex]) {\n    price = Math.round(1200 * 1.37973 ** amounts[nftIndex] * 100) / 100\n  }\n\n  const tokenIds = getTokenIds(nftId)\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const fetchDetails = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      const { methods } = getNftContract()\n      const nftCount = await methods.nftCount(nftId).call()\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        nftCount: parseInt(nftCount, 10),\n        nftBurnCount: parseInt(nftBurnCount, 10),\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [nftId])\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n    } else {\n      try {\n        await fetchDetails()\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n      }\n    }\n  }\n\n  const handleSuccess = () => {\n    fetchDetails()\n    reInitialize()\n  }\n\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  return (\n    <SmallCard isActive={walletOwnsNft}>\n      {fileType === 'mp4' && (\n        <video height=\"500px\" width=\"100%\" loop autoPlay muted>\n          <source src={originalImage} type=\"video/mp4\" />\n          <track kind=\"captions\" />\n        </video>\n      )}\n      {fileType !== 'mp4' && (\n        <Image src={originalImage} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\n      )}\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {isInitialized && walletCanClaim && (\n            <Tag outline variant=\"success\">\n              {TranslateString(526, 'Available')}\n            </Tag>\n          )}\n          {isInitialized && !walletCanClaim && (\n            <Tag outline variant=\"failure\">\n              Sold Out\n            </Tag>\n          )}\n          {isInitialized && tokenIds && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n        </Header>\n        {isInitialized && loggedIn && walletCanClaim && isSupplyAvailable && (\n          <Button onClick={onPresentClaimModal} mt=\"24px\">\n            {TranslateString(999, 'Claim this NFT')} for {price} LIFE\n          </Button>\n        )}\n        {isInitialized && loggedIn && walletCanClaim && isSupplyAvailable && (\n          <CustomButton\n            onClick={() =>\n              window.open(\n                'https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x50f4220C82c9325dC99f729C3328FB5c338BEaae',\n                '_blank',\n              )\n            }\n            mt=\"24px\"\n          >\n            {TranslateString(999, 'Buy LIFE')}\n          </CustomButton>\n        )}\n        {isInitialized && walletOwnsNft && (\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"2\">\n        {state.isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Number minted')}:</Text>\n              <Value>\n                {MINTED}/{tokenSupply}\n              </Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Minted By Me')}:</Text>\n              <Value>{MINTS}</Value>\n            </InfoRow>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </SmallCard>\n  )\n}\n\nexport default NftCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, LogoIcon, Text, Button } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport nfts from 'config/constants/legendary'\nimport NftCard from './components/NftCard'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst StyledNotFound = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 64px);\n  justify-content: center;\n`\n\nconst CustomHeading = styled(Heading)`\n  text-align: center;\n`\n\nconst Detail = (props) => {\n  const TranslateString = useI18n()\n  const { match } = props\n  const id = parseInt(match.params.id)\n\n  const nft1 = nfts.filter((nft) => nft.nftId === id)\n\n  if (nft1[0]) {\n    return (\n      <NftProvider>\n        <Page>\n          <StyledHero>\n            <CustomHeading as=\"h1\" size=\"xxl\" color=\"#9f0d0d\" mb=\"24px\">\n              {nft1[0] && nft1[0].name}\n            </CustomHeading>\n          </StyledHero>\n          <NftCard nft={nft1[0]} />\n        </Page>\n      </NftProvider>\n    )\n  }\n\n  return (\n    <Page>\n      <StyledNotFound>\n        <LogoIcon width=\"64px\" mb=\"8px\" />\n        <Heading size=\"xxl\">404</Heading>\n        <Text mb=\"16px\">{TranslateString(999, 'Oops, page not found.')}</Text>\n        <Button as=\"a\" href=\"/\" size=\"sm\">\n          {TranslateString(999, 'Back Home')}\n        </Button>\n      </StyledNotFound>\n    </Page>\n  )\n}\n\nexport default Detail\n"],"sourceRoot":""}