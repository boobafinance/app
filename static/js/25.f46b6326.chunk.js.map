{"version":3,"sources":["hooks/useTokenBalance.ts","hooks/useAllowance.ts","views/EpicDetail/components/InfoRow.tsx","views/EpicDetail/components/Image.tsx","views/EpicDetail/utils/contracts.ts","views/EpicDetail/contexts/NftProvider.tsx","views/EpicDetail/components/ClaimNftModal.tsx","views/EpicDetail/components/BurnNftModal.tsx","views/EpicDetail/components/TransferNftModal.tsx","views/EpicDetail/components/NftCard/index.tsx","views/EpicDetail/index.tsx"],"names":["useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","useWallet","account","ethereum","fastRefresh","getTokenBalance","res","useNftAllowance","tokenContract","spenderAddress","dependency","allowance","setAllowance","console","log","toString","fetch","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","previewImage","href","target","rel","getNftContract","contractOptions","nftAbi","nft","NFT","getFromWayArray","v","array","t","length","i","push","fromWei","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","currentBlock","useBlock","multicall","epicNftFarm","address","EpicNftFarm","name","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","toNumber","error","fetchContractData","nftContract","params","getMinted","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","nftId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","fetchNonLoggedInContractData","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","pendingTx","setPendingTx","setError","TranslateString","useI18n","nftMintingContract","useRabbitMintingFarm","contraToken","useERC20","getLifeAddress","onApprove","useNftApprove","cakeBalance","cakeInWallet","getBalanceNumber","handleConfirm","mintNFT","send","from","on","title","tokenAmount","color","mb","fullWidth","disabled","onClick","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","AMOUNT_TO_CLAIM","style","alignItems","display","checked","scale","onChange","ml","cursor","variant","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","Web3","utils","isAddress","transferFrom","htmlFor","id","type","placeholder","evt","inputValue","isWarning","Header","InfoBlock","Button","attrs","SmallCard","Card","CustomButton","NftCard","isOpen","nftCount","nftBurnCount","useContext","originalImage","fileType","description","tokenSupply","metadata","nftIndex","indexOf","MINTED","MAX_MINT","firstCharOfAccount","slice","lastCharOfAccount","loggedIn","MINTS","walletCanClaim","undefined","price","Math","round","isSupplyAvailable","walletOwnsNft","fetchDetails","ChevronUpIcon","ChevronDownIcon","useCallback","isDataFetched","handleSuccess","useModal","onPresentClaimModal","onPresentTransferModal","isActive","height","width","loop","autoPlay","muted","kind","outline","mt","window","open","p","as","textAlign","StyledHero","textSubtle","StyledNotFound","CustomHeading","Heading","Detail","props","match","nft1","nfts","filter","Page","size"],"mappings":"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","file":"static/js/25.f46b6326.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useCake, useLottery } from './useContract'\nimport { getAllowance } from '../utils/erc20'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const lotteryContract = useLottery()\n  const cakeContract = useCake()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, cakeContract, lotteryContract])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n\n// Retrieve NFT allowance\nexport const useNftAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        console.log(e.toString())\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import { AbiItem, fromWei } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/nfts'\nimport BigNumber from 'bignumber.js'\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = (nft as unknown) as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport const getFromWei = (v: any) => {\n  if (!v) return 0\n  return parseFloat(fromWei(v.toString(), 'ether'))\n}\n\nexport const getFromWayArray = (v: any) => {\n  if (!v) return []\n  const array = []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(fromWei(v[i].toString(), 'ether'))\n    }\n  }\n  return array\n}\n\nexport const getToFloat = (v: any) => {\n  if (!v) return []\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseInt(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport const getToInt = (v: any) => {\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseFloat(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport epicNftFarm from 'config/abi/epicNftFarm.json'\nimport { EpicNftFarm } from 'config/constants/epic'\nimport multicall from 'utils/multicall'\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  myMints: number[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: BunnyMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: '',\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n    myMints: [],\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n\n          allowMultipleClaimsArr,\n          rarityArr,\n          priceMultiplierArr,\n          maxMintPerNftArr,\n          tokenPerBurnArr,\n        ] = await multicall(epicNftFarm, [\n          { address: EpicNftFarm, name: 'startBlockNumber' },\n          { address: EpicNftFarm, name: 'endBlockNumber' },\n          { address: EpicNftFarm, name: 'countBurnt' },\n          { address: EpicNftFarm, name: 'totalSupplyDistributed' },\n          { address: EpicNftFarm, name: 'currentDistributedSupply' },\n          { address: EpicNftFarm, name: 'allowMultipleClaims' },\n          { address: EpicNftFarm, name: 'rarity' },\n          { address: EpicNftFarm, name: 'priceMultiplier' },\n          { address: EpicNftFarm, name: 'maxMintPerNft' },\n          { address: EpicNftFarm, name: 'tokenPerBurn' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBurnt]: [BigNumber] = countBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBurnt: countBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          allowMultipleClaims: allowMultipleClaimsArr[0],\n          rarity: rarityArr[0].toString(),\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(epicNftFarm, [{ address: EpicNftFarm, name: 'getMinted', params: [account] }])\n\n        // console.log('getMinted', getMinted)\n\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getToInt(getMinted[0][3])\n        const prices = getFromWayArray(getMinted[0][4])\n        const myMints = getToInt(getMinted[0][5])\n\n        // console.log('hasClaimed', hasClaimed)\n        // console.log('amounts', amounts)\n        // console.log('ownerById', ownerById)\n        // console.log('maxMintByNft', maxMintByNft)\n        // console.log('prices', prices)\n        console.log('myMints', myMints)\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n          myMints,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    const fetchNonLoggedInContractData = async () => {\n      try {\n        const getMinted = await multicall(epicNftFarm, [\n          { address: EpicNftFarm, name: 'getMinted', params: ['0x0000000000000000000000000000000000000000'] },\n        ])\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          amounts,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    } else {\n      fetchNonLoggedInContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { EpicNftFarm, AMOUNT_TO_CLAIM } from 'config/constants/epic'\nimport { getLifeAddress } from 'utils/addressHelpers'\nimport { Nft } from 'config/constants/types'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useERC20, useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\nimport { useNftAllowance } from '../../../hooks/useAllowance'\nimport { useNftApprove } from '../../../hooks/useApprove'\n\ninterface ClaimNftModalProps {\n  nft: Nft\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(EpicNftFarm)\n  const contraToken = useERC20(getLifeAddress())\n  const allowance = useNftAllowance(contraToken, EpicNftFarm, pendingTx)\n  const onApprove = useNftApprove(contraToken, EpicNftFarm)\n  const cakeBalance = useTokenBalance(getLifeAddress())\n  const cakeInWallet = getBalanceNumber(cakeBalance)\n\n  // console.log('getLifeAddress', getLifeAddress(), EpicNftFarm, allowance)\n  // console.log('allowance', allowance)\n\n  const handleConfirm = async () => {\n    if (allowance === null) {\n      return\n    }\n\n    try {\n      await nftMintingContract.methods\n        .mintNFT(nft.nftId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to claim NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to mint NFT:', err)\n    }\n  }\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError(`You must have LIFE balance to claim NFT`)\n    }\n  }, [cakeInWallet, setError])\n\n  return (\n    <Modal title={`Claim NFT for ${nft.tokenAmount} LIFE`} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n      </ModalContent>\n      <Actions>\n        <Button\n          fullWidth\n          disabled={!account || pendingTx || isLoading || allowance > 0}\n          onClick={async () => {\n            try {\n              setPendingTx(true)\n              await onApprove()\n              setPendingTx(false)\n            } catch (e) {\n              setPendingTx(false)\n              console.error(e)\n            }\n          }}\n        >\n          Approve\n        </Button>\n\n        <Button\n          fullWidth\n          onClick={handleConfirm}\n          disabled={!account || isLoading || cakeInWallet <= 0 || allowance <= 0}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { EpicNftFarm, AMOUNT_TO_CLAIM } from 'config/constants/epic'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface BurnNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [accepted, setAccepted] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(EpicNftFarm)\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds\n\n      await nftMintingContract.methods\n        .burnNFT(tokenId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to burn NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to burn NFT:', err)\n    }\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>${AMOUNT_TO_CLAIM} LIFE</Value>\n        </InfoRow>\n      </ModalContent>\n      <ModalContent>\n        <Text color=\"failure\">\n          {TranslateString(999, 'When you trade in this NFT to receive LIFE, you will lose access to it forever!')}\n        </Text>\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\n      </ModalContent>\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\n          {TranslateString(999, 'I understand')}\n        </Text>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default BurnNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { NFT } from 'config/constants/epic'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftContract = usePancakeRabbits(NFT)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await nftContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n  LogoIcon,\n} from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { AMOUNT_TO_CLAIM } from 'config/constants/epic'\nimport Page from 'components/layout/Page'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { getNftContract } from '../../utils/contracts'\nimport ClaimNftModal from '../ClaimNftModal'\nimport BurnNftModal from '../BurnNftModal'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst StyledNotFound = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 64px);\n  justify-content: center;\n`\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst SmallCard = styled(Card)`\n  width: 500px;\n  margin: 0 auto;\n\n  @media (max-width: 767px) {\n    width: 320px;\n  }\n`\n\nconst CustomButton = styled(Button)`\n  margin-left: 10px;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: true,\n    nftCount: 0,\n    nftBurnCount: 0,\n  })\n  const TranslateString = useI18n()\n  const {\n    isInitialized,\n    hasClaimed,\n    ownerById,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize,\n    allowMultipleClaims,\n    rarity,\n    priceMultiplier,\n    maxMintPerNft,\n    tokenPerBurn,\n    amounts,\n    maxMintByNft,\n    prices,\n    myMints,\n  } = useContext(NftProviderContext)\n  const { account } = useWallet()\n\n  console.log('CONTRACT/GALLERY INFO:', totalSupplyDistributed, rarity, priceMultiplier, maxMintPerNft, tokenPerBurn)\n  console.log('LIMITS BY NFT:', tokenPerBurn, amounts, maxMintByNft, prices)\n\n  // maxMintPerNft limit max amount that a nft can be minted\n  // maxMintByNft array containing individual amount of mint per nft index\n  // prices array containing individual prices of a mint per nft index\n  // tokenPerBurn global price\n\n  console.log(ownerById)\n\n  const { nftId, name, previewImage, originalImage, fileType, description, metadata, tokenAmount, tokenSupply } = nft\n  const PRICE = prices[nft.nftId] || tokenPerBurn // here we get the price\n\n  const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\n\n  const MINTED = amounts[nftIndex] ? parseInt(amounts[nftIndex].toString()) : 0\n  const MAX_MINT = maxMintByNft[nftIndex] ? parseInt(maxMintByNft[nftIndex].toString()) : maxMintPerNft\n\n  const hasClaimedArr: any = hasClaimed[0]\n  const ownerByIdArr: any = ownerById[0]\n\n  const firstCharOfAccount = account != null && account.slice(0, 4)\n  const lastCharOfAccount = account != null && account.slice(-4)\n\n  const accountName = account != null && `${firstCharOfAccount}...${lastCharOfAccount}`\n\n  const loggedIn = account !== null\n\n  // console.log('?hasClaimed', hasClaimed)\n  // console.log('?ownerById', ownerById)\n\n  const MINTS = myMints[nftIndex] || 0\n\n  const walletCanClaim = maxMintPerNft === 0 || MINTED === undefined || MINTED < MAX_MINT\n\n  let price = 350\n\n  if (amounts && amounts[nftIndex]) {\n    price = Math.round(350 * 1.016282 ** amounts[nftIndex] * 100) / 100\n  }\n\n  const tokenIds = getTokenIds(nftId)\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const fetchDetails = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      const { methods } = getNftContract()\n      const nftCount = await methods.nftCount(nftId).call()\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        nftCount: parseInt(nftCount, 10),\n        nftBurnCount: parseInt(nftBurnCount, 10),\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [nftId])\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n    } else {\n      try {\n        await fetchDetails()\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n      }\n    }\n  }\n\n  const handleSuccess = () => {\n    fetchDetails()\n    reInitialize()\n  }\n\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  return (\n    <SmallCard isActive={walletOwnsNft}>\n      {fileType === 'mp4' && (\n        <video height=\"500px\" width=\"100%\" loop autoPlay muted>\n          <source src={originalImage} type=\"video/mp4\" />\n          <track kind=\"captions\" />\n        </video>\n      )}\n      {fileType !== 'mp4' && (\n        <Image src={originalImage} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\n      )}\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {isInitialized && walletCanClaim && (\n            <Tag outline variant=\"success\">\n              {TranslateString(526, 'Available')}\n            </Tag>\n          )}\n          {isInitialized && !walletCanClaim && (\n            <Tag outline variant=\"failure\">\n              Sold Out\n            </Tag>\n          )}\n          {isInitialized && tokenIds && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n        </Header>\n        {isInitialized && loggedIn && walletCanClaim && isSupplyAvailable && (\n          <Button onClick={onPresentClaimModal} mt=\"24px\">\n            {TranslateString(999, 'Claim this NFT')} for {price} LIFE\n          </Button>\n        )}\n        {isInitialized && loggedIn && walletCanClaim && isSupplyAvailable && (\n          <CustomButton\n            onClick={() =>\n              window.open(\n                'https://swap.boobafinance.com/#/swap?outputCurrency=0x50f4220C82c9325dC99f729C3328FB5c338BEaae',\n                '_blank',\n              )\n            }\n            mt=\"24px\"\n          >\n            {TranslateString(999, 'Buy LIFE')}\n          </CustomButton>\n        )}\n        {isInitialized && walletOwnsNft && (\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"2\">\n        {state.isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Number minted')}:</Text>\n              <Value>\n                {MINTED}/{tokenSupply}\n              </Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Minted By Me')}:</Text>\n              <Value>{MINTS}</Value>\n            </InfoRow>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </SmallCard>\n  )\n}\n\nexport default NftCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, LogoIcon, Text, Button } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport nfts from 'config/constants/epic'\nimport NftCard from './components/NftCard'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst StyledNotFound = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 64px);\n  justify-content: center;\n`\n\nconst CustomHeading = styled(Heading)`\n  text-align: center;\n`\n\nconst Detail = (props) => {\n  const TranslateString = useI18n()\n  const { match } = props\n  const id = parseInt(match.params.id)\n\n  const nft1 = nfts.filter((nft) => nft.nftId === id)\n\n  if (nft1[0]) {\n    return (\n      <NftProvider>\n        <Page>\n          <StyledHero>\n            <CustomHeading as=\"h1\" size=\"xxl\" color=\"#9f0d0d\" mb=\"24px\">\n              {nft1[0] && nft1[0].name}\n            </CustomHeading>\n          </StyledHero>\n          <NftCard nft={nft1[0]} />\n        </Page>\n      </NftProvider>\n    )\n  }\n\n  return (\n    <Page>\n      <StyledNotFound>\n        <LogoIcon width=\"64px\" mb=\"8px\" />\n        <Heading size=\"xxl\">404</Heading>\n        <Text mb=\"16px\">{TranslateString(999, 'Oops, page not found.')}</Text>\n        <Button as=\"a\" href=\"/\" size=\"sm\">\n          {TranslateString(999, 'Back Home')}\n        </Button>\n      </StyledNotFound>\n    </Page>\n  )\n}\n\nexport default Detail\n"],"sourceRoot":""}